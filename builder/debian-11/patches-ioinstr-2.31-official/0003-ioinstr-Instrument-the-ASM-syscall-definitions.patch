From 895261c6649f35f548be4a834fc1411794f34b2e Mon Sep 17 00:00:00 2001
From: Sebastien Valat <sebastien.valat.dev@orange.fr>
Date: Sat, 26 Mar 2022 11:03:24 +0100
Subject: [PATCH 3/3] ioinstr: Instrument the ASM syscall definitions

---
 sysdeps/unix/sysv/linux/x86_64/sysdep.h | 218 +++++++++++++++---------
 1 file changed, 137 insertions(+), 81 deletions(-)

diff --git a/sysdeps/unix/sysv/linux/x86_64/sysdep.h b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
index 70d49ead22..b41fe2f62f 100644
--- a/sysdeps/unix/sysv/linux/x86_64/sysdep.h
+++ b/sysdeps/unix/sysv/linux/x86_64/sysdep.h
@@ -64,11 +64,63 @@
 #  define SYSCALL_ERROR_LABEL syscall_error
 # endif
 
+#ifdef GLIBC_ENABLE_SYSCALL_INTERCEPT
+    # undef INSTRU_START
+    #define INSTRU_START(name) \
+        /*INSTRU*/								      \
+        subq    $80, %rsp								      \
+        movq    %rdi, -40(%rbp)								      \
+        movq    %rsi, -48(%rbp)								      \
+        movq    %rdx, -56(%rbp)								      \
+        movq    %rcx, -64(%rbp)								      \
+        movq    %r8, -72(%rbp)								      \
+        movq    %r9, -80(%rbp)								      \
+        movq    $0, -8(%rbp)								      \
+        movl    $0, -12(%rbp)								      \
+        movq    glibc_syscall_intercepter(%rip), %rax								      \
+        testq   %rax, %rax								      \
+        je      .##name##_intru_L2								      \
+        movq    glibc_syscall_intercepter(%rip), %r10								      \
+        movq    -64(%rbp), %rdi								      \
+        movq    -56(%rbp), %rsi								      \
+        movq    -48(%rbp), %rcx								      \
+        movq    -40(%rbp), %rdx								      \
+        leaq    -24(%rbp), %rax								      \
+        pushq   -80(%rbp)								      \
+        pushq   -72(%rbp)								      \
+        movq    %rdi, %r9								      \
+        movq    %rsi, %r8								      \
+        movl    $1, %esi								      \
+        movq    %rax, %rdi								      \
+        call    *%r10								      \
+        addq    $16, %rsp								      \
+        movl    %eax, -12(%rbp)								      \
+    .##name##_intru_L2:								      \
+        cmpl    $0, -12(%rbp)								      \
+        jne     .##name##_intru_L3								      \
+        /*END INSTRU*/
+#else
+    # undef INSTRU_START
+    #define INSTRU_START(name)
+#endif
+
+#ifdef GLIBC_ENABLE_SYSCALL_INTERCEPT
+    # undef INSTRU_END
+    #define INSTRU_END(name) \
+        /*END INSTRU*/ \
+    .##name##_intru_L3:
+#else
+    # undef INSTRU_END
+    #define INSTRU_END(name)
+#endif
+
 # undef	PSEUDO
 # define PSEUDO(name, syscall_name, args)				      \
   .text;								      \
   ENTRY (name)								      \
+    INSTRU_START(name);\
     DO_CALL (syscall_name, args);					      \
+    INSTRU_END(name);\
     cmpq $-4095, %rax;							      \
     jae SYSCALL_ERROR_LABEL
 
@@ -81,7 +133,9 @@
 # define PSEUDO_NOERRNO(name, syscall_name, args) \
   .text;								      \
   ENTRY (name)								      \
-    DO_CALL (syscall_name, args)
+    INSTRU_START(name);\
+    DO_CALL (syscall_name, args);\
+    INSTRU_END(name);
 
 # undef	PSEUDO_END_NOERRNO
 # define PSEUDO_END_NOERRNO(name) \
@@ -93,7 +147,9 @@
 # define PSEUDO_ERRVAL(name, syscall_name, args) \
   .text;								      \
   ENTRY (name)								      \
+    INSTRU_START(name);\
     DO_CALL (syscall_name, args);					      \
+    INSTRU_END(name);\
     negq %rax
 
 # undef	PSEUDO_END_ERRVAL
@@ -235,11 +291,11 @@
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), 0, 0, 0, 0, 0, 0); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number)							\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number)							\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     }\
     (long int) resultvar;						\
 })
@@ -251,13 +307,13 @@
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), (long)(arg1), 0, 0, 0, 0, 0); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number), "r" (_a1)						\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
+        register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number), "r" (_a1)						\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     }\
     (long int) resultvar;						\
 })
@@ -269,15 +325,15 @@
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), (long)(arg1), (long)(arg2), 0, 0, 0, 0); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
-    register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number), "r" (_a1), "r" (_a2)				\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
+        TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
+        register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
+        register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number), "r" (_a1), "r" (_a2)				\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     }\
     (long int) resultvar;						\
 })
@@ -289,17 +345,17 @@
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), (long)(arg1), (long)(arg2), (long)(arg3), 0, 0, 0); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
-    register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
-    register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3)			\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
+        TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
+        TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
+        register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
+        register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
+        register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3)			\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     }\
     (long int) resultvar;						\
 })
@@ -307,23 +363,23 @@
 #undef internal_syscall4
 #define internal_syscall4(number, err, arg1, arg2, arg3, arg4)		\
 ({									\
-    unsigned long int resultvar;					\
+unsigned long int resultvar;					\
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), (long)(arg1), (long)(arg2), (long)(arg3), (long)(arg4), 0, 0); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    register TYPEFY (arg4, _a4) asm ("r10") = __arg4;			\
-    register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
-    register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
-    register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4)		\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
+        TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
+        TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
+        TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
+        register TYPEFY (arg4, _a4) asm ("r10") = __arg4;			\
+        register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
+        register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
+        register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4)		\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     } \
     (long int) resultvar;						\
 })
@@ -335,22 +391,22 @@
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), (long)(arg1), (long)(arg2), (long)(arg3), (long)(arg4), (long)(arg5), 0); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    TYPEFY (arg5, __arg5) = ARGIFY (arg5);			 	\
-    TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    register TYPEFY (arg5, _a5) asm ("r8") = __arg5;			\
-    register TYPEFY (arg4, _a4) asm ("r10") = __arg4;			\
-    register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
-    register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
-    register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4),		\
-      "r" (_a5)								\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        TYPEFY (arg5, __arg5) = ARGIFY (arg5);			 	\
+        TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
+        TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
+        TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
+        TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
+        register TYPEFY (arg5, _a5) asm ("r8") = __arg5;			\
+        register TYPEFY (arg4, _a4) asm ("r10") = __arg4;			\
+        register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
+        register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
+        register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4),		\
+        "r" (_a5)								\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     }\
     (long int) resultvar;						\
 })
@@ -362,24 +418,24 @@
     int intercep_result = GLIBC_SYSCALL_NO_INTERCEPT; \
     GLIBC_SYSCALL_INTERCEPT(&(resultvar), (number), (long)(arg1), (long)(arg2), (long)(arg3), (long)(arg4), (long)(arg5), (long)(arg6)); \
     if (intercep_result == GLIBC_SYSCALL_NO_INTERCEPT) {\
-    TYPEFY (arg6, __arg6) = ARGIFY (arg6);			 	\
-    TYPEFY (arg5, __arg5) = ARGIFY (arg5);			 	\
-    TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
-    TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
-    TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
-    TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
-    register TYPEFY (arg6, _a6) asm ("r9") = __arg6;			\
-    register TYPEFY (arg5, _a5) asm ("r8") = __arg5;			\
-    register TYPEFY (arg4, _a4) asm ("r10") = __arg4;			\
-    register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
-    register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
-    register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
-    asm volatile (							\
-    "syscall\n\t"							\
-    : "=a" (resultvar)							\
-    : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4),		\
-      "r" (_a5), "r" (_a6)						\
-    : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
+        TYPEFY (arg6, __arg6) = ARGIFY (arg6);			 	\
+        TYPEFY (arg5, __arg5) = ARGIFY (arg5);			 	\
+        TYPEFY (arg4, __arg4) = ARGIFY (arg4);			 	\
+        TYPEFY (arg3, __arg3) = ARGIFY (arg3);			 	\
+        TYPEFY (arg2, __arg2) = ARGIFY (arg2);			 	\
+        TYPEFY (arg1, __arg1) = ARGIFY (arg1);			 	\
+        register TYPEFY (arg6, _a6) asm ("r9") = __arg6;			\
+        register TYPEFY (arg5, _a5) asm ("r8") = __arg5;			\
+        register TYPEFY (arg4, _a4) asm ("r10") = __arg4;			\
+        register TYPEFY (arg3, _a3) asm ("rdx") = __arg3;			\
+        register TYPEFY (arg2, _a2) asm ("rsi") = __arg2;			\
+        register TYPEFY (arg1, _a1) asm ("rdi") = __arg1;			\
+        asm volatile (							\
+        "syscall\n\t"							\
+        : "=a" (resultvar)							\
+        : "0" (number), "r" (_a1), "r" (_a2), "r" (_a3), "r" (_a4),		\
+        "r" (_a5), "r" (_a6)						\
+        : "memory", REGISTERS_CLOBBERED_BY_SYSCALL);			\
     } \
     (long int) resultvar;						\
 })
-- 
2.30.2

